/*------------------------------------*\
    #WIDTHS
\*------------------------------------*/

// Preconfigure these settings before the @import of this file.
$widths-ns: null !default;

// A mixin to spit out our width classes. Pass in the columns we want the widths
// to have, and an optional suffix for responsive widths. E.g. to create thirds
// and quarters for a small breakpoint:
//
// @include widths(3 4, -sm);

@mixin widths($columns, $breakpoint: null) {

    // Loop through the number of columns for each denominator of our fractions.
    @each $denominator in $columns {

        // Begin creating a numerator for our fraction up until we hit the
        // denominator.
        @for $numerator from 1 through $denominator {

            // Build a class in the format `.u-3/4`.
            .#{$widths-ns}u-#{$numerator}\/#{$denominator}#{$breakpoint} {
                width: ($numerator / $denominator) * 100% !important;
            }

        }

    }

}

/**
 * A series of width helper classes that you can use to size things like grid
 * systems. Classes take a fraction-like format (e.g. `.u-2/3`).
 *
 * Use these in your markup, e.g.:
 *
 * <div class="u-7/12">
 *
 */

// Fill an array with our desired breakpoints and their nicknames (e.g. `lg`).
$widths-breakpoints: (
    'sm': 'screen and (min-width: 720px)',
    'md': 'screen and (min-width: 1024px)',
    'lg': 'screen and (min-width: 1280px)',
    'xl': 'screen and (min-width: 1440px)',
) !default;

// Which columns would we like to generate?
$widths-columns: 1 2 3 4 5 !default;

// Build our breakpoint-agnostic widths.
@include widths($widths-columns);

$alias: foo;

// Build each of our breakpointsâ€™ widths.
@each $alias, $condition in $widths-breakpoints {

    @media #{unquote($condition)} {
        @include widths($widths-columns, \@#{$alias});
    }

}
